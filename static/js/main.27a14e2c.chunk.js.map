{"version":3,"sources":["logo.svg","Movies.js","App.js","reportWebVitals.js","index.js"],"names":["Movies","props","state","data","recomm_movie","getMyData","a","axios","get","movies","console","log","JSON","stringify","setState","notifyInitialLoadingComplete","isMobile","this","movieName","rate","i","ret","mainStar","parseInt","Number","document","querySelectorAll","forEach","elem","triggerDiff","getBoundingClientRect","top","window","innerHeight","isElementUnderBottom","style","opacity","transform","addEventListener","handleScroll","class","href","getYutubeUrl","title","src","large_cover_image","genres","map","target","medium_cover_image","loading","alt","getRateString","rating","year","synopsis","includes","Component","App","useEffect","setBackgroundImageOpacity","setBackgroundGradient","isPc","useMediaQuery","query","isTablet","isVisible","bg","querySelector","backgroundImage","e","changeBgSection","bgTop","height","useState","isUsingGradAnim","setUsingGradAnim","dev","getDeviceType","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27a14e2c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{Component} from 'react'\r\nimport axios from 'axios'\r\n//import { useMediaQuery } from \"react-responsive\"\r\nimport * as ScrollUtil from './ScrollUtil.js'\r\n\r\nfunction isElementUnderBottom(elem, triggerDiff) {\r\n    const {top} = elem.getBoundingClientRect(); \r\n        // 등록된 element의 Rect를 top으로 저장\r\n    const {innerHeight} = window;\r\n        // 현재 window를 innerHeight로 저장\r\n\r\n    return top > innerHeight + (triggerDiff || 0); \r\n        // (현재 window + triggerDiff(예시로는 -20))보다 \r\n        // element의 rect가 크냐? \r\n        // 크다 : 현재 window보다 elem이 아래에 위치하므로 true return\r\n        // 작다 : 현재 window보다 elem이 같거나(맞나?) 위에 위치하므로 false return\r\n}\r\n\r\nclass Movies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"device ctor\");\r\n        console.log(props.isMobile);\r\n    }\r\n\r\n    state = {\r\n        data:[],\r\n        recomm_movie:0,\r\n    };\r\n    \r\n    //getMyData = async() => {\r\n    //getMyData = async function() {\r\n    getMyData = async () => {\r\n        //const data = await axios.get('https://www.everdevel.com/ReactJS/axios/json/');\r\n        // const data = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        // console.log('data is ' + JSON.stringify(data));\r\n        let data;\r\n        try {\r\n        data = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        data = data.data.data.movies;\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            console.log('data is ' + JSON.stringify(data));\r\n            this.setState({data});\r\n            this.props.notifyInitialLoadingComplete();\r\n            \r\n            let recomm_movie = data[0];\r\n            this.setState({recomm_movie});\r\n        }\r\n\r\n        // async fcn은 암묵적으로 Promise를 반환\r\n    };\r\n    \r\n    //React Hook \"useMediaQuery\" cannot be called at the top level.\r\n    // isPc = useMediaQuery( {\r\n    //     query : \"(min-width:1024px)\"\r\n    //   });\r\n    //   isTablet = useMediaQuery({\r\n    //     query : \"(min-width:768px) and (max-width:1023px)\"\r\n    //   });\r\n    //   isMobile = useMediaQuery({\r\n    //     query : \"(max-width:767px)\"\r\n    //   });\r\n\r\n    componentDidMount() {\r\n        console.log('in componentDidMount@Movie.js');\r\n        this.getMyData();\r\n    }\r\n    componentDidUpdate() {\r\n        console.log('in componentDidUpdate@Movie.js');\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('in componentWillUnmount@Movie.js');\r\n    }\r\n\r\n    getYutubeUrl(movieName) {\r\n        return 'https://www.youtube.com/results?search_query=movie+' + movieName;\r\n    }\r\n\r\n    getRateString(rate) {\r\n        var i;\r\n        let ret;\r\n        var mainStar = parseInt(Number(rate)/2);\r\n        var subStar = rate%2;\r\n        for(i = 0; i < mainStar; i++) {\r\n            ret += '⭐';\r\n        }\r\n        ret += '☆';\r\n\r\n        return ret;\r\n    }\r\n\r\n    // 왜 component의 함수로 집어넣으면 is not defined? 나중에 알아보기 210318\r\n    // isElementUnderBottom(elem, triggerDiff) {\r\n    //     const {top} = elem.getBoundingClientRect(); \r\n    //         // 등록된 element의 Rect를 top으로 저장\r\n    //     const {innerHeight} = window;\r\n    //         // 현재 window를 innerHeight로 저장\r\n    \r\n    //     return top > innerHeight + (triggerDiff || 0); \r\n    //         // (현재 window + triggerDiff(예시로는 -20))보다 \r\n    //         // element의 rect가 크냐? \r\n    //         // 크다 : 현재 window보다 elem이 아래에 위치하므로 true return\r\n    //         // 작다 : 현재 window보다 elem이 같거나(맞나?) 위에 위치하므로 false return\r\n    // }\r\n    \r\n    handleScroll() { // scroll callback\r\n        const elems = document.querySelectorAll('.up-on-scroll');\r\n        elems.forEach(elem => {\r\n            if(isElementUnderBottom(elem, -20)) { // 현재 시야보다 아래에 있을 때\r\n                elem.style.opacity = \"0\"; // 완전 투명\r\n                elem.style.transform = 'translateY(70px)'; // 70px 아래에 이동하도록 효과\r\n            } else { // 현재와 동일선상 혹은 위에 위치할 때\r\n                elem.style.opacity = 1;\r\n                elem.style.transform = 'translateY(0px)'; // 제자리로 돌아오는 효과\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log('is ' + JSON.stringify(this.state.data));\r\n        console.log('ismobile? ' + this.props.isMobile);\r\n        //ScrollUtil.handleScroll();\r\n        window.addEventListener('scroll', this.handleScroll);\r\n        return (\r\n            <div class='moviemain'>\r\n                <div class='recomm_movie'>\r\n                    {\r\n                        <a class='recomm_movie_poster_wrapper' href={this.getYutubeUrl(this.state.recomm_movie.title)} >\r\n                            <img class='recomm_movie_poster' src={this.state.recomm_movie.large_cover_image}/>\r\n                            <div class='recomm_movie_title'>\r\n                                <div class='recomm_movie_title_wrapper'>\r\n                                    <h1>{this.state.recomm_movie.title}</h1>\r\n                                    <h2>{this.state.recomm_movie.title}</h2>\r\n                                    <h3>{this.state.recomm_movie.genres}</h3>\r\n                                </div>\r\n                            </div>                            \r\n                        </a>\r\n                    }\r\n                </div>\r\n                \r\n                <div class='movies_wrapper'>\r\n                    <h1 class='movies_summary_category'>All Moives</h1>\r\n                    <div class='movies'>\r\n                        {\r\n                            this.state.data.map((movies) => {\r\n                                return (\r\n                                    <div class={(this.props.isMobile ? \"movie_mobile\" : \"movie\") + \" up-on-scroll\"}>\r\n                                        <a class=\"movielink\" href={this.getYutubeUrl(movies.title)} target=\"_blink\">\r\n                                            <img class=\"movieposter\" src={movies.medium_cover_image}\r\n                                                loading=\"lazy\" alt={movies.title} title={movies.title} />\r\n                                            {/* <div class=\"movieposter_gradation\"></div> */}\r\n                                        </a>\r\n                                        <div class=\"moviesummary\">\r\n                                            <h1>{movies.title}</h1>\r\n                                            <h4>{this.getRateString(movies.rating)}</h4>\r\n                                            <h4>{movies.year}</h4>\r\n                                            <div class=\"moviesynopsis\">\r\n                                                <p>{movies.synopsis}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class='movies_wrapper'>\r\n                    <h1 class='movies_summary_category'>Comedy</h1>\r\n                    <div class='movies'>\r\n                        {\r\n                            this.state.data.map((movies) => {\r\n                                if(movies.genres.includes('Comedy')) {\r\n                                    return (\r\n                                        <div class={(this.props.isMobile ? \"movie_mobile\" : \"movie\") + \" up-on-scroll\"}>\r\n                                            <a class=\"movielink\" href={this.getYutubeUrl(movies.title)} target=\"_blink\">\r\n                                                <img class=\"movieposter\" src={movies.medium_cover_image}\r\n                                                    loading=\"lazy\" alt={movies.title} title={movies.title} />\r\n                                                {/* <div class=\"movieposter_gradation\"></div> */}\r\n                                            </a>\r\n                                            <div class=\"moviesummary\">\r\n                                                <h1>{movies.title}</h1>\r\n                                                <h4>{this.getRateString(movies.rating)}</h4>\r\n                                                <h4>{movies.year}</h4>\r\n                                                <div class=\"moviesynopsis\">\r\n                                                    <p>{movies.synopsis}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class='movies_wrapper'>\r\n                    <h1 class='movies_summary_category'>Action</h1>\r\n                    <div class='movies'>\r\n                        {\r\n                            this.state.data.map((movies) => {\r\n                                if(movies.genres.includes('Action')) {\r\n                                    return (\r\n                                        <div class={(this.props.isMobile ? \"movie_mobile\" : \"movie\") + \" up-on-scroll\"}>\r\n                                            <a class=\"movielink\" href={this.getYutubeUrl(movies.title)} target=\"_blink\">\r\n                                                <img class=\"movieposter\" src={movies.medium_cover_image}\r\n                                                    loading=\"lazy\" alt={movies.title} title={movies.title} />\r\n                                                {/* <div class=\"movieposter_gradation\"></div> */}\r\n                                            </a>\r\n                                            <div class=\"moviesummary\">\r\n                                                <h1>{movies.title}</h1>\r\n                                                <h4>{this.getRateString(movies.rating)}</h4>\r\n                                                <h4>{movies.year}</h4>\r\n                                                <div class=\"moviesynopsis\">\r\n                                                    <p>{movies.synopsis}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div class='movies_wrapper'>\r\n                    <h1 class='movies_summary_category'>Romance</h1>\r\n                    <div class='movies'>\r\n                        {\r\n                            this.state.data.map((movies) => {\r\n                                if(movies.genres.includes('Romance')) {\r\n                                    return (\r\n                                        <div class={(this.props.isMobile ? \"movie_mobile\" : \"movie\") + \" up-on-scroll\"}>\r\n                                            <a class=\"movielink\" href={this.getYutubeUrl(movies.title)} target=\"_blink\">\r\n                                                <img class=\"movieposter\" src={movies.medium_cover_image}\r\n                                                    loading=\"lazy\" alt={movies.title} title={movies.title} />\r\n                                                {/* <div class=\"movieposter_gradation\"></div> */}\r\n                                            </a>\r\n                                            <div class=\"moviesummary\">\r\n                                                <h1>{movies.title}</h1>\r\n                                                <h4>{this.getRateString(movies.rating)}</h4>\r\n                                                <h4>{movies.year}</h4>\r\n                                                <div class=\"moviesynopsis\">\r\n                                                    <p>{movies.synopsis}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class='movies_wrapper'>\r\n                    <h1 class='movies_summary_category'>Drama</h1>\r\n                    <div class='movies'>\r\n                        {\r\n                            this.state.data.map((movies) => {\r\n                                if(movies.genres.includes('Drama')) {\r\n                                    return (\r\n                                        <div class={(this.props.isMobile ? \"movie_mobile\" : \"movie\") + \" up-on-scroll\"}>\r\n                                            <a class=\"movielink\" href={this.getYutubeUrl(movies.title)} target=\"_blink\">\r\n                                                <img class=\"movieposter\" src={movies.medium_cover_image}\r\n                                                    loading=\"lazy\" alt={movies.title} title={movies.title} />\r\n                                                {/* <div class=\"movieposter_gradation\"></div> */}\r\n                                            </a>\r\n                                            <div class=\"moviesummary\">\r\n                                                <h1>{movies.title}</h1>\r\n                                                <h4>{this.getRateString(movies.rating)}</h4>\r\n                                                <h4>{movies.year}</h4>\r\n                                                <div class=\"moviesynopsis\">\r\n                                                    <p>{movies.synopsis}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class='movies_wrapper'>\r\n                    <h1 class='movies_summary_category'>Documentary</h1>\r\n                    <div class='movies'>\r\n                        {\r\n                            this.state.data.map((movies) => {\r\n                                if(movies.genres.includes('Documentary')) {\r\n                                    return (\r\n                                        <div class={(this.props.isMobile ? \"movie_mobile\" : \"movie\") + \" up-on-scroll\"}>\r\n                                            <a class=\"movielink\" href={this.getYutubeUrl(movies.title)} target=\"_blink\">\r\n                                                <img class=\"movieposter\" src={movies.medium_cover_image}\r\n                                                    loading=\"lazy\" alt={movies.title} title={movies.title} />\r\n                                                {/* <div class=\"movieposter_gradation\"></div> */}\r\n                                            </a>\r\n                                            <div class=\"moviesummary\">\r\n                                                <h1>{movies.title}</h1>\r\n                                                <h4>{this.getRateString(movies.rating)}</h4>\r\n                                                <h4>{movies.year}</h4>\r\n                                                <div class=\"moviesynopsis\">\r\n                                                    <p>{movies.synopsis}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Movies;\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Movies from './Movies';\nimport { useMediaQuery } from \"react-responsive\"\n//import { Mobile/*,Tablet,Pc*/ } from './DeviceMediaQuery';\n\n\n// getMovies = async () => {\n//   const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");  \n// }\n\n// getMovies = async function() {\n//   const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");  \n//   return movies;\n// }\n\n\n// async getMoviesAsync() {\n//     const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Food name={getMovies.data.data.movies}/>\n//     </div>\n//   );\n// }\n\n\n//class App extends React.Component {\nfunction App() {\n  \n  // componentDidMount로 동작시키거나, 바인딩된 props,state 변경시에만 불리는 hook\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    console.log('like didMount HOOK@app.js');\n    //setBackgroundImage('https://yts.mx/assets/images/movies/The_Shawshank_Redemption_1994/medium-cover.jpg');\n    setBackgroundImageOpacity(1);\n    setBackgroundGradient(true);\n  }, []); \n  //두 번째 배열에 props나 state값을 넣을경우 \n  //         --> 해당 값이 변경될때만 effect hook 호출\n  //두 번째 배열에 아무것도 넣지않을 경우 \n  //         --> 바인딩 감시가 필요없으므로 component가 mount될 때만 불림\n\n  // componentDidMount와 componentDidUpdate와 비슷한 lifcyle을 갖는 Hook\n  useEffect(() => {\n    // 마운트, 렌더링마다 호출됨\n    console.log('like didMount or didUpdate HOOK@app.js');\n  });\n\n  // componentWillUnmount와 비슷한 liftcycle을 갖는 Hook (함수 return을 넣어주면 됨)\n  useEffect(() => {\n    console.log('like didUnmount HOOK@app.js');\n    return () => {\n    }\n  });\n\n  const isPc = useMediaQuery( {\n    query : \"(min-width:1024px)\"\n  });\n  const isTablet = useMediaQuery({\n    query : \"(min-width:768px) and (max-width:1023px)\"\n  });\n  const isMobile = useMediaQuery({\n    query : \"(max-width:767px)\"\n  });\n\n  const getDeviceType = () => {\n    let dev = \"\";\n\n    if(isPc) {\n      dev += \"PC\";\n    } else if(isTablet) {\n      dev += \"Tablet\";\n    } else if(isMobile) {\n      dev += \"Mobile\";      \n    } else {\n      dev += \"unknown\";\n    }\n\n    return dev;\n  }\n\n  const setBackgroundGradient = (isVisible) => {\n    const bg = document.querySelector('.gradient-border');\n\n    if(bg == null) {\n      return;\n    }\n\n    if(isVisible) {\n      bg.backgroundImage = 'linear-gradient(60deg, #000000, #9b9bda, #a9a9a9, #a9a9a9, #a9a9a9)';\n      console.log(isVisible + \"vis \" + bg.backgroundImage);\n    } else {\n      bg.backgroundImage = 'linear-gradient(60deg, #000000)';\n    }\n    console.log(isVisible + \"vis \" + bg.backgroundImage);\n  }\n\n  const setBackgroundImageOpacity = (opacity) => {\n    const bg = document.querySelector('.background-change-wrap > div');\n    if(bg==null) return;\n    bg.style.opacity = opacity;\n  }\n\n  const setBackgroundImage = (image) => {\n    if(image == null)\n      return;\n\n    const bgImg = document.querySelector('.background-change-wrap > div > img');\n    bgImg.src = image;\n  }\n\n  const handleScroll = (e) => { // scroll callback\n    const changeBgSection = document.querySelector('.background-change-wrap');\n    if(changeBgSection==null) return;\n    const { top: bgTop, height: bgHeight } = changeBgSection.getBoundingClientRect();\n    var opacity = '1';\n    if (bgTop < 0) {\n      const rate = (-1) * bgTop / 4;\n      //setBackgroundImage('https://yts.mx/assets/images/movies/The_Shawshank_Redemption_1994/medium-cover.jpg');\n      opacity = `${(100 - rate / 5) / 100}`;\n    } else {\n      opacity = `1`;\n    }\n\n    setBackgroundImageOpacity(opacity);\n    setBackgroundGradient(false);\n  }\n\n  //let isUsingGradAnim = true;\n  const [isUsingGradAnim, setUsingGradAnim] = useState(true);\n\n  const notifyInitialLoadingComplete = () => {\n    console.log(\"mv init noty\");\n    setBackgroundGradient(false);\n    setUsingGradAnim(current => !current);\n  }\n\n  useEffect(() => {\n    console.log(\"us anim changed\" + isUsingGradAnim);\n  }, [isUsingGradAnim]); // isUsingGradAnim이 변경되면 해당 hook이 불린다\n\n  return (\n    <div>      \n      <div class='responsivestate'>\n        {getDeviceType()}\n      </div>\n      <div class='container'>\n        {/* <div class={'background-change-wrap'}>\n          <div class={isUsingGradAnim?'gradient-border':''}>\n            <img name='img-buffer-1'/>\n          </div>\n        </div> */\n          <div class={'background-change-wrap'}>\n            <div class={isUsingGradAnim ? 'gradient-border' : ''}>\n            </div>\n          </div>\n        }\n      <Movies isMobile={isMobile} notifyInitialLoadingComplete={notifyInitialLoadingComplete}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}